var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import got from 'got';
import AmericanVehicle from '../vehicles/american.vehicle';
import { SessionController } from './controller';
import logger from '../logger';
import { BASE_URL, CLIENT_ID, CLIENT_SECRET, API_HOST } from '../constants/america';
var AmericanController = /** @class */ (function (_super) {
    __extends(AmericanController, _super);
    function AmericanController(userConfig) {
        var _this = _super.call(this, userConfig) || this;
        _this.vehicles = [];
        logger.debug("US Controller created");
        return _this;
    }
    AmericanController.prototype.refreshAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var shouldRefreshToken, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        shouldRefreshToken = Math.floor(+new Date() / 1000 - this.session.tokenExpiresAt) <= 10;
                        if (!(this.session.refreshToken && shouldRefreshToken)) return [3 /*break*/, 2];
                        logger.debug('refreshing token');
                        return [4 /*yield*/, got(BASE_URL + "/v2/ac/oauth/token/refresh", {
                                method: 'POST',
                                body: {
                                    'refresh_token': this.session.refreshToken,
                                },
                                headers: {
                                    'client_secret': CLIENT_SECRET,
                                    'client_id': CLIENT_ID,
                                },
                                json: true,
                            })];
                    case 1:
                        response = _a.sent();
                        this.session.accessToken = response.body.access_token;
                        this.session.refreshToken = response.body.refresh_token;
                        this.session.tokenExpiresAt = Math.floor(+new Date() / 1000 + parseInt(response.body.expires_in));
                        return [2 /*return*/, Promise.resolve('Token refreshed')];
                    case 2: return [2 /*return*/, Promise.resolve('Token not expired, no need to refresh')];
                }
            });
        });
    };
    AmericanController.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        logger.debug('Logging in to API');
                        return [4 /*yield*/, got(BASE_URL + "/v2/ac/oauth/token", {
                                method: 'POST',
                                body: {
                                    username: this.userConfig.username,
                                    password: this.userConfig.password,
                                },
                                headers: {
                                    'client_secret': CLIENT_SECRET,
                                    'client_id': CLIENT_ID,
                                },
                                json: true,
                            })];
                    case 1:
                        response = _a.sent();
                        this.session.accessToken = response.body.access_token;
                        this.session.refreshToken = response.body.refresh_token;
                        this.session.tokenExpiresAt = Math.floor(+new Date() / 1000 + parseInt(response.body.expires_in));
                        return [2 /*return*/, Promise.resolve('login good')];
                    case 2:
                        err_1 = _a.sent();
                        logger.debug(err_1.body);
                        Promise.reject(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, Promise.reject('login bad')];
                }
            });
        });
    };
    AmericanController.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve('OK')];
            });
        });
    };
    AmericanController.prototype.getVehicles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, got(BASE_URL + "/ac/v2/enrollment/details/" + this.userConfig.username, {
                            method: 'GET',
                            headers: {
                                'access_token': this.session.accessToken,
                                'client_id': CLIENT_ID,
                                'Host': API_HOST,
                                'User-Agent': 'okhttp/3.12.0',
                                'payloadGenerated': '20200226171938',
                                'includeNonConnectedVehicles': 'Y',
                            },
                        })];
                    case 1:
                        response = _a.sent();
                        data = JSON.parse(response.body);
                        if (data.enrolledVehicleDetails === undefined) {
                            this.vehicles = [];
                            return [2 /*return*/, Promise.resolve(this.vehicles)];
                        }
                        data.enrolledVehicleDetails.forEach(function (vehicle) {
                            var vehicleInfo = vehicle.vehicleDetails;
                            var vehicleConfig = {
                                nickname: vehicleInfo.nickName,
                                name: vehicleInfo.nickName,
                                vin: vehicleInfo.vin,
                                regDate: vehicleInfo.enrollmentDate,
                                brandIndicator: vehicleInfo.brandIndicator,
                                regId: vehicleInfo.regid,
                                generation: vehicleInfo.modelYear > 2016 ? '2' : '1',
                            };
                            _this.vehicles.push(new AmericanVehicle(vehicleConfig, _this));
                        });
                        return [2 /*return*/, Promise.resolve(this.vehicles)];
                }
            });
        });
    };
    return AmericanController;
}(SessionController));
export { AmericanController };
//# sourceMappingURL=american.controller.js.map