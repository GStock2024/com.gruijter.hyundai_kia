var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import got from 'got';
import { CA_ENDPOINTS, CLIENT_ORIGIN } from '../constants/canada';
import CanadianVehicle from '../vehicles/canadian.vehicle';
import { SessionController } from './controller';
import logger from '../logger';
var CanadianController = /** @class */ (function (_super) {
    __extends(CanadianController, _super);
    function CanadianController(userConfig) {
        var _this = _super.call(this, userConfig) || this;
        _this._preferredDealer = null;
        _this._accountInfo = null;
        _this.vehicles = [];
        _this.timeOffset = -(new Date().getTimezoneOffset() / 60);
        logger.debug('CA Controller created');
        return _this;
    }
    CanadianController.prototype.refreshAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var shouldRefreshToken, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        shouldRefreshToken = Math.floor(+new Date() / 1000 - this.session.tokenExpiresAt) <= 10;
                        if (!(this.session.refreshToken && shouldRefreshToken)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.verifyToken, {}, {})];
                    case 1:
                        response = _a.sent();
                        this.session.accessToken = response.body.access_token;
                        this.session.refreshToken = response.body.refresh_token;
                        this.session.tokenExpiresAt = Math.floor(+new Date() / 1000 + response.body.expires_in);
                        return [2 /*return*/, Promise.resolve('Token refreshed')];
                    case 2: return [2 /*return*/, Promise.resolve('Token not expired, no need to refresh')];
                }
            });
        });
    };
    CanadianController.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info('Begin login request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.login, {
                                loginId: this.userConfig.username,
                                password: this.userConfig.password,
                            })];
                    case 2:
                        response = _a.sent();
                        this.session.accessToken = response.result.accessToken;
                        this.session.refreshToken = response.result.refreshToken;
                        this.session.tokenExpiresAt = Math.floor(+new Date() / 1000 + response.result.expireIn);
                        return [2 /*return*/, Promise.resolve('login good')];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_1)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CanadianController.prototype.logout = function () {
        return Promise.resolve('OK');
    };
    CanadianController.prototype.getVehicles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, err_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info('Begin getVehicleList request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.vehicleList, {})];
                    case 2:
                        response = _a.sent();
                        data = response.result;
                        if (data.vehicles === undefined) {
                            this.vehicles = [];
                            return [2 /*return*/, Promise.resolve(this.vehicles)];
                        }
                        data.vehicles.forEach(function (vehicle) {
                            var vehicleConfig = {
                                nickname: vehicle.nickName,
                                name: vehicle.nickName,
                                vin: vehicle.vin,
                                regDate: vehicle.enrollmentDate,
                                brandIndicator: vehicle.brandIndicator,
                                regId: vehicle.regid,
                                generation: vehicle.genType,
                            };
                            _this.vehicles.push(new CanadianVehicle(vehicleConfig, _this));
                        });
                        return [2 /*return*/, Promise.resolve(this.vehicles)];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_2)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //////////////////////////////////////////////////////////////////////////////
    // Account
    //////////////////////////////////////////////////////////////////////////////
    CanadianController.prototype.myAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info('Begin myAccount request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.myAccount, {})];
                    case 2:
                        response = _a.sent();
                        this._accountInfo = response.result;
                        return [2 /*return*/, Promise.resolve(this._accountInfo)];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_3)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CanadianController.prototype.preferedDealer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info('Begin preferedDealer request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.preferedDealer, {})];
                    case 2:
                        response = _a.sent();
                        this._preferredDealer = response.result;
                        return [2 /*return*/, Promise.resolve(this._preferredDealer)];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_4)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //////////////////////////////////////////////////////////////////////////////
    // Internal
    //////////////////////////////////////////////////////////////////////////////
    // TODO: not quite sure how to type this if it's dynamic?
    /* eslint-disable @typescript-eslint/no-explicit-any */
    CanadianController.prototype.request = function (endpoint, body, headers) {
        if (headers === void 0) { headers = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug("[" + endpoint + "] " + JSON.stringify(headers) + " " + JSON.stringify(body));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, got(endpoint, {
                                method: 'POST',
                                json: true,
                                headers: __assign({ from: CLIENT_ORIGIN, language: 1, offset: this.timeOffset, accessToken: this.session.accessToken }, headers),
                                body: __assign({}, body),
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.body.responseHeader.responseCode != 0) {
                            return [2 /*return*/, Promise.reject('bad request: ' + response.body.responseHeader.responseDesc)];
                        }
                        return [2 /*return*/, Promise.resolve(response.body)];
                    case 3:
                        err_5 = _a.sent();
                        logger.error(err_5.message);
                        return [2 /*return*/, Promise.reject('error: ' + err_5)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return CanadianController;
}(SessionController));
export { CanadianController };
//# sourceMappingURL=canadian.controller.js.map