var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { EU_CONSTANTS, EU_BASE_URL, EU_API_HOST, EU_CLIENT_ID } from './../constants/europe';
import * as pr from 'push-receiver';
import got from 'got';
import { ALL_ENDPOINTS } from '../constants';
import EuropeanVehicle from '../vehicles/european.vehicle';
import { SessionController } from './controller';
import logger from '../logger';
import { URLSearchParams } from 'url';
import { CookieJar } from 'tough-cookie';
var EuropeanController = /** @class */ (function (_super) {
    __extends(EuropeanController, _super);
    function EuropeanController(userConfig) {
        var _this = _super.call(this, userConfig) || this;
        _this.session = {
            accessToken: undefined,
            refreshToken: undefined,
            controlToken: undefined,
            deviceId: _this.uuidv4(),
            tokenExpiresAt: 0,
            controlTokenExpiresAt: 0,
        };
        _this.vehicles = [];
        logger.debug("EU Controller created");
        _this.session.deviceId = _this.uuidv4();
        logger.debug(_this.session.deviceId);
        return _this;
    }
    EuropeanController.prototype.uuidv4 = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    };
    EuropeanController.prototype.refreshAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var shouldRefreshToken, formData, response, responseBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        shouldRefreshToken = Math.floor(Date.now() / 1000 - this.session.tokenExpiresAt) >= -10;
                        if (!this.session.refreshToken) {
                            return [2 /*return*/, 'Need refresh token to refresh access token. Use login()'];
                        }
                        if (!shouldRefreshToken) {
                            return [2 /*return*/, 'Token not expired, no need to refresh'];
                        }
                        formData = new URLSearchParams();
                        formData.append('grant_type', 'refresh_token');
                        formData.append('redirect_uri', 'https://www.getpostman.com/oauth2/callback'); // Oversight from Hyundai developers
                        formData.append('refresh_token', this.session.refreshToken);
                        return [4 /*yield*/, got(ALL_ENDPOINTS.EU.token, {
                                method: 'POST',
                                headers: {
                                    'Authorization': EU_CONSTANTS.basicToken,
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'Host': EU_API_HOST,
                                    'Connection': 'Keep-Alive',
                                    'Accept-Encoding': 'gzip',
                                    'User-Agent': 'okhttp/3.10.0',
                                },
                                body: formData.toString(),
                                throwHttpErrors: false,
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode !== 200) {
                            return [2 /*return*/, "Refresh token failed: " + response.body];
                        }
                        responseBody = JSON.parse(response.body);
                        this.session.accessToken = 'Bearer ' + responseBody.access_token;
                        this.session.tokenExpiresAt = Math.floor(Date.now() / 1000 + responseBody.expires_in);
                        return [2 /*return*/, 'Token refreshed'];
                }
            });
        });
    };
    EuropeanController.prototype.enterPin = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.session.accessToken === '') {
                            throw 'Token not set';
                        }
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v1/user/pin", {
                                method: 'PUT',
                                headers: {
                                    'Authorization': this.session.accessToken,
                                    'Content-Type': 'application/json',
                                },
                                body: {
                                    deviceId: this.session.deviceId,
                                    pin: this.userConfig.pin,
                                },
                                json: true,
                            })];
                    case 1:
                        response = _a.sent();
                        this.session.controlToken = 'Bearer ' + response.body.controlToken;
                        this.session.controlTokenExpiresAt = Math.floor(Date.now() / 1000 + response.body.expiresTime);
                        return [2 /*return*/, 'PIN entered OK, The pin is valid for 10 minutes'];
                }
            });
        });
    };
    EuropeanController.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cookieJar, authCodeResponse, authorizationCode, regexMatch, credentials, notificationReponse, formData, response, responseBody, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        cookieJar = new CookieJar();
                        return [4 /*yield*/, got(ALL_ENDPOINTS.EU.session, { cookieJar: cookieJar })];
                    case 1:
                        _a.sent();
                        logger.debug("login cookie set");
                        // required by the api to set lang
                        return [4 /*yield*/, got(ALL_ENDPOINTS.EU.language, { method: 'POST', body: '{"lang":"en"}', cookieJar: cookieJar })];
                    case 2:
                        // required by the api to set lang
                        _a.sent();
                        logger.debug("login language set");
                        return [4 /*yield*/, got(ALL_ENDPOINTS.EU.login, {
                                method: 'POST',
                                json: true,
                                body: {
                                    'email': this.userConfig.username,
                                    'password': this.userConfig.password,
                                },
                                cookieJar: cookieJar,
                            })];
                    case 3:
                        authCodeResponse = _a.sent();
                        logger.debug("login got authresponse");
                        logger.debug(authCodeResponse.body);
                        logger.debug(authCodeResponse.body.resMsg);
                        authorizationCode = void 0;
                        if (authCodeResponse) {
                            regexMatch = /code=([^&]*)/g.exec(authCodeResponse.body.redirectUrl);
                            if (regexMatch !== null) {
                                authorizationCode = regexMatch[1];
                            }
                            else {
                                throw new Error('@EuropeControllerLogin: AuthCode was not found');
                            }
                        }
                        logger.debug("login got authresponse2");
                        return [4 /*yield*/, pr.register(EU_CONSTANTS.GCMSenderID)];
                    case 4:
                        credentials = _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v1/spa/notifications/register", {
                                method: 'POST',
                                headers: {
                                    'ccsp-service-id': EU_CLIENT_ID,
                                    'Content-Type': 'application/json;charset=UTF-8',
                                    'Host': EU_API_HOST,
                                    'Connection': 'Keep-Alive',
                                    'Accept-Encoding': 'gzip',
                                    'User-Agent': 'okhttp/3.10.0',
                                },
                                body: {
                                    pushRegId: credentials.gcm.token,
                                    pushType: 'GCM',
                                    uuid: this.session.deviceId,
                                },
                                json: true,
                            })];
                    case 5:
                        notificationReponse = _a.sent();
                        if (notificationReponse) {
                            this.session.deviceId = notificationReponse.body.resMsg.deviceId;
                        }
                        logger.debug("login got device id:");
                        logger.debug(notificationReponse.body.resMsg.deviceId);
                        formData = new URLSearchParams();
                        formData.append('grant_type', 'authorization_code');
                        formData.append('redirect_uri', ALL_ENDPOINTS.EU.redirectUri);
                        formData.append('code', authorizationCode);
                        logger.debug(formData.toString());
                        return [4 /*yield*/, got(ALL_ENDPOINTS.EU.token, {
                                method: 'POST',
                                headers: {
                                    'Authorization': EU_CONSTANTS.basicToken,
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'Host': EU_API_HOST,
                                    'Connection': 'Keep-Alive',
                                    'Accept-Encoding': 'gzip',
                                    'User-Agent': 'okhttp/3.10.0',
                                    'grant_type': 'authorization_code',
                                },
                                body: formData.toString(),
                                cookieJar: cookieJar,
                            })];
                    case 6:
                        response = _a.sent();
                        logger.debug("login got token");
                        if (response.statusCode !== 200) {
                            throw "Get token failed: " + response.body;
                        }
                        if (response) {
                            responseBody = JSON.parse(response.body);
                            this.session.accessToken = 'Bearer ' + responseBody.access_token;
                            this.session.refreshToken = responseBody.refresh_token;
                            this.session.tokenExpiresAt = Math.floor(Date.now() / 1000 + responseBody.expires_in);
                            logger.debug('Bearer ' + responseBody.access_token);
                            logger.debug(responseBody.refresh_token);
                            logger.debug(responseBody.expires_in);
                            logger.debug('almost done');
                        }
                        return [2 /*return*/, 'Login success'];
                    case 7:
                        err_1 = _a.sent();
                        throw err_1.message;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    EuropeanController.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, 'OK'];
            });
        });
    };
    EuropeanController.prototype.getVehicles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.session.accessToken === undefined) {
                            throw 'Token not set';
                        }
                        logger.debug('getvehicles about to get vehicles');
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v1/spa/vehicles", {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.session.accessToken,
                                    'ccsp-device-id': this.session.deviceId,
                                },
                                json: true,
                            })];
                    case 1:
                        response = _a.sent();
                        logger.debug('getvehicles got vehicles');
                        this.vehicles = [];
                        return [4 /*yield*/, this.asyncForEach(response.body.resMsg.vehicles, function (v) { return __awaiter(_this, void 0, void 0, function () {
                                var vehicleProfileReponse, vehicleProfile, vehicleConfig;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, got(EU_BASE_URL + "/api/v1/spa/vehicles/" + v.vehicleId + "/profile", {
                                                method: 'GET',
                                                headers: {
                                                    'Authorization': this.session.accessToken,
                                                    'ccsp-device-id': this.session.deviceId,
                                                },
                                                json: true,
                                            })];
                                        case 1:
                                            vehicleProfileReponse = _a.sent();
                                            vehicleProfile = vehicleProfileReponse.body.resMsg;
                                            vehicleConfig = {
                                                nickname: v.nickname,
                                                name: v.vehicleName,
                                                regDate: v.regDate,
                                                brandIndicator: 'H',
                                                id: v.vehicleId,
                                                vin: vehicleProfile.vinInfo[0].basic.vin,
                                                generation: vehicleProfile.vinInfo[0].basic.modelYear,
                                            };
                                            this.vehicles.push(new EuropeanVehicle(vehicleConfig, this));
                                            logger.debug("Added vehicle " + vehicleConfig.id);
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.vehicles];
                }
            });
        });
    };
    // TODO: type this or replace it with a normal loop
    /* eslint-disable @typescript-eslint/no-explicit-any */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    EuropeanController.prototype.asyncForEach = function (array, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < array.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, callback(array[index], index, array)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return EuropeanController;
}(SessionController));
export { EuropeanController };
//# sourceMappingURL=european.controller.js.map