var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import got from 'got';
import logger from '../logger';
import { REGIONS, DEFAULT_VEHICLE_STATUS_OPTIONS } from '../constants';
import { CA_ENDPOINTS, CLIENT_ORIGIN } from '../constants/canada';
import { Vehicle } from './vehicle';
var CanadianVehicle = /** @class */ (function (_super) {
    __extends(CanadianVehicle, _super);
    function CanadianVehicle(vehicleConfig, controller) {
        var _this = _super.call(this, vehicleConfig, controller) || this;
        _this.vehicleConfig = vehicleConfig;
        _this.controller = controller;
        _this._nextService = null;
        _this._info = null;
        _this._features = null;
        _this._featuresModel = null;
        _this.region = REGIONS.CA;
        _this.timeOffset = -(new Date().getTimezoneOffset() / 60);
        logger.debug("CA Vehicle " + _this.vehicleConfig.id + " created");
        return _this;
    }
    //////////////////////////////////////////////////////////////////////////////
    // Vehicle
    //////////////////////////////////////////////////////////////////////////////
    CanadianVehicle.prototype.vehicleInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, vehicleInfoResponse, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin vehicleInfo request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.vehicleInfo, {})];
                    case 2:
                        response = _a.sent();
                        vehicleInfoResponse = response.result;
                        this._info = vehicleInfoResponse.vehicleInfo;
                        this._status = vehicleInfoResponse.status;
                        this._features = vehicleInfoResponse.features;
                        this._featuresModel = vehicleInfoResponse.featuresModel;
                        return [2 /*return*/, Promise.resolve(vehicleInfoResponse)];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_1)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CanadianVehicle.prototype.status = function (input) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var statusConfig, endpoint, response, vehicleStatus, parsedStatus, err_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        statusConfig = __assign(__assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
                        logger.debug('Begin status request, polling car: ' + input.refresh);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        endpoint = statusConfig.refresh ? CA_ENDPOINTS.remoteStatus : CA_ENDPOINTS.status;
                        return [4 /*yield*/, this.request(endpoint, {})];
                    case 2:
                        response = _c.sent();
                        vehicleStatus = response.result;
                        parsedStatus = {
                            chassis: {
                                hoodOpen: vehicleStatus.hoodOpen,
                                trunkOpen: vehicleStatus.trunkOpen,
                                locked: vehicleStatus.doorLock,
                                openDoors: {
                                    frontRight: !!vehicleStatus.doorOpen.frontRight,
                                    frontLeft: !!vehicleStatus.doorOpen.frontLeft,
                                    backLeft: !!vehicleStatus.doorOpen.backLeft,
                                    backRight: !!vehicleStatus.doorOpen.backRight,
                                },
                                tirePressureWarningLamp: {
                                    rearLeft: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampRearLeft,
                                    frontLeft: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampFrontLeft,
                                    frontRight: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampFrontRight,
                                    rearRight: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampRearRight,
                                    all: !!vehicleStatus.tirePressureLamp.trunkOpenStatus,
                                },
                            },
                            climate: {
                                active: vehicleStatus.airCtrlOn,
                                steeringwheelHeat: !!vehicleStatus.steerWheelHeat,
                                sideMirrorHeat: false,
                                rearWindowHeat: !!vehicleStatus.sideBackWindowHeat,
                                defrost: vehicleStatus.defrost,
                                temperatureSetpoint: vehicleStatus.airTemp.value,
                                temperatureUnit: vehicleStatus.airTemp.unit,
                            },
                            engine: {
                                ignition: vehicleStatus.engine,
                                adaptiveCruiseControl: vehicleStatus.acc,
                                range: vehicleStatus.dte.value,
                                charging: (_a = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _a === void 0 ? void 0 : _a.batteryCharge,
                                batteryCharge: (_b = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.battery) === null || _b === void 0 ? void 0 : _b.batSoc,
                            },
                        };
                        this._status = input.parsed ? parsedStatus : vehicleStatus;
                        return [2 /*return*/, Promise.resolve(this._status)];
                    case 3:
                        err_2 = _c.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_2)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CanadianVehicle.prototype.nextService = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin nextService request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.nextService, {})];
                    case 2:
                        response = _a.sent();
                        this._nextService = response.result;
                        return [2 /*return*/, Promise.resolve(this._nextService)];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_3)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //////////////////////////////////////////////////////////////////////////////
    // Car commands with preauth (PIN)
    //////////////////////////////////////////////////////////////////////////////
    CanadianVehicle.prototype.lock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var preAuth, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin lock request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.getPreAuth()];
                    case 2:
                        preAuth = _a.sent();
                        // assuming the API returns a bad status code for failed attempts
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.lock, {}, { pAuth: preAuth })];
                    case 3:
                        // assuming the API returns a bad status code for failed attempts
                        _a.sent();
                        return [2 /*return*/, Promise.resolve('Lock successful')];
                    case 4:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_4)];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CanadianVehicle.prototype.unlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var preAuth, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin unlock request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.getPreAuth()];
                    case 2:
                        preAuth = _a.sent();
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.unlock, {}, { pAuth: preAuth })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, Promise.resolve('Unlock successful')];
                    case 4:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_5)];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /*
    airCtrl: Boolean,  // climatisation
    heating1: Boolean, // front defrost, airCtrl will be on
    defrost: Boolean,  // side mirrors & rear defrost
    airTempvalue: number | null  // temp in degrees for clim and heating 17-27
    */
    CanadianVehicle.prototype.start = function (startConfig) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var body, airTemp, airTempValue, preAuth, response, err_6;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        logger.debug('Begin startClimate request');
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 4, , 5]);
                        body = {
                            hvacInfo: {
                                airCtrl: ((_a = startConfig.airCtrl) !== null && _a !== void 0 ? _a : false) || ((_b = startConfig.defrost) !== null && _b !== void 0 ? _b : false) ? 1 : 0,
                                defrost: (_c = startConfig.defrost) !== null && _c !== void 0 ? _c : false,
                                // postRemoteFatcStart: 1,
                                heating1: startConfig.heating1 ? 1 : 0,
                            },
                        };
                        airTemp = startConfig.airTempvalue;
                        // TODO: can we use getTempCode here from util?
                        if (airTemp != null) {
                            if (airTemp > 27 || airTemp < 17) {
                                return [2 /*return*/, Promise.reject('air temperature should be between 17 and 27 degrees')];
                            }
                            airTempValue = (6 + (airTemp - 17) * 2).toString(16).toUpperCase() + 'H';
                            if (airTempValue.length == 2) {
                                airTempValue = '0' + airTempValue;
                            }
                            body.hvacInfo['airTemp'] = { value: airTempValue, unit: 0, hvacTempType: 1 };
                        }
                        else if (((_d = startConfig.airCtrl) !== null && _d !== void 0 ? _d : false) || ((_e = startConfig.defrost) !== null && _e !== void 0 ? _e : false)) {
                            return [2 /*return*/, Promise.reject('air temperature should be specified')];
                        }
                        return [4 /*yield*/, this.getPreAuth()];
                    case 2:
                        preAuth = _f.sent();
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.start, body, { pAuth: preAuth })];
                    case 3:
                        response = _f.sent();
                        return [2 /*return*/, Promise.resolve(response)];
                    case 4:
                        err_6 = _f.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_6)];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CanadianVehicle.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var preAuth, response, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin stop request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.getPreAuth()];
                    case 2:
                        preAuth = _a.sent();
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.stop, {
                                pAuth: preAuth,
                            })];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, Promise.resolve(response)];
                    case 4:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_7)];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    // TODO: type this
    CanadianVehicle.prototype.lights = function (withHorn) {
        if (withHorn === void 0) { withHorn = false; }
        return __awaiter(this, void 0, void 0, function () {
            var preAuth, response, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin lights request with horn ' + withHorn);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.getPreAuth()];
                    case 2:
                        preAuth = _a.sent();
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.hornlight, { horn: withHorn }, { pAuth: preAuth })];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, Promise.resolve(response)];
                    case 4:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_8)];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    // TODO: @Seb to take a look at doing this
    CanadianVehicle.prototype.odometer = function () {
        throw new Error('Method not implemented.');
    };
    CanadianVehicle.prototype.location = function () {
        return __awaiter(this, void 0, void 0, function () {
            var preAuth, response, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug('Begin locate request');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.getPreAuth()];
                    case 2:
                        preAuth = _a.sent();
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.locate, {}, { pAuth: preAuth })];
                    case 3:
                        response = _a.sent();
                        this._location = response.result;
                        return [2 /*return*/, Promise.resolve(this._location)];
                    case 4:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_9)];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    //////////////////////////////////////////////////////////////////////////////
    // Internal
    //////////////////////////////////////////////////////////////////////////////
    // Does this have to be done before every command?
    CanadianVehicle.prototype.getPreAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info('Begin pre-authentication');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.request(CA_ENDPOINTS.verifyPin, {})];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, Promise.resolve(response.result.pAuth)];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_10)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // TODO: not sure how to type a dynamic response
    /* eslint-disable @typescript-eslint/no-explicit-any */
    CanadianVehicle.prototype.request = function (endpoint, body, headers) {
        if (headers === void 0) { headers = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.debug("[" + endpoint + "] " + JSON.stringify(headers) + " " + JSON.stringify(body));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, got(endpoint, {
                                method: 'POST',
                                json: true,
                                headers: __assign({ from: CLIENT_ORIGIN, language: 1, offset: this.timeOffset, accessToken: this.controller.session.accessToken, vehicleId: this.vehicleConfig.id }, headers),
                                body: __assign({ pin: this.userConfig.pin }, body),
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.body.responseHeader.responseCode != 0) {
                            return [2 /*return*/, Promise.reject('bad request: ' + response.body.responseHeader.responseDesc)];
                        }
                        return [2 /*return*/, Promise.resolve(response.body)];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject('error: ' + err_11)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return CanadianVehicle;
}(Vehicle));
export default CanadianVehicle;
//# sourceMappingURL=canadian.vehicle.js.map