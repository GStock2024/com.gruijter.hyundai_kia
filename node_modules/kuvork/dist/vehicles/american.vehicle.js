var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import got from 'got';
import logger from '../logger';
import { REGIONS, DEFAULT_VEHICLE_STATUS_OPTIONS } from '../constants';
import { BASE_URL, CLIENT_ID, API_HOST } from '../constants/america';
import { Vehicle } from './vehicle';
import { URLSearchParams } from 'url';
export default class AmericanVehicle extends Vehicle {
    constructor(vehicleConfig, controller) {
        super(vehicleConfig, controller);
        this.vehicleConfig = vehicleConfig;
        this.controller = controller;
        this.region = REGIONS.US;
        logger.debug(`US Vehicle ${this.vehicleConfig.regId} created`);
    }
    getDefaultHeaders() {
        return {
            'access_token': this.controller.session.accessToken,
            'client_id': CLIENT_ID,
            'Host': API_HOST,
            'User-Agent': 'okhttp/3.12.0',
            'registrationId': this.vehicleConfig.regId,
            'gen': this.vehicleConfig.generation,
            'username': this.userConfig.username,
            'vin': this.vehicleConfig.vin,
            'APPCLOUD-VIN': this.vehicleConfig.vin,
            'Language': '0',
            'to': 'ISS',
            'encryptFlag': 'false',
            'from': 'SPA',
            'brandIndicator': this.vehicleConfig.brandIndicator,
            'bluelinkservicepin': this.userConfig.pin,
            'offset': '-5',
        };
    }
    fullStatus() {
        throw new Error('Method not implemented.');
    }
    odometer() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(`/ac/v2/enrollment/details/${this.userConfig.username}`, {
                method: 'GET',
                headers: Object.assign({}, this.getDefaultHeaders()),
            });
            if (response.statusCode !== 200) {
                throw 'Failed to get odometer reading!';
            }
            const data = JSON.parse(response.body);
            const foundVehicle = data.enrolledVehicleDetails.find(item => {
                return item.vehicleDetails.vin === this.vin();
            });
            this._odometer = {
                value: foundVehicle.vehicleDetails.odometer,
                unit: 0,
            };
            return this._odometer;
        });
    }
    /**
     * This is seems to always poll the modem directly, no caching
     */
    location() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request('/ac/v2/rcs/rfc/findMyCar', {
                method: 'GET',
                headers: Object.assign({}, this.getDefaultHeaders()),
            });
            if (response.statusCode !== 200) {
                throw 'Failed to get location!';
            }
            const data = JSON.parse(response.body);
            return {
                latitude: data.coord.lat,
                longitude: data.coord.lon,
                altitude: data.coord.alt,
                speed: {
                    unit: data.speed.unit,
                    value: data.speed.value,
                },
                heading: data.head,
            };
        });
    }
    start(startConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const mergedConfig = Object.assign({
                airCtrl: false,
                igniOnDuration: 10,
                airTempvalue: 70,
                defrost: false,
                heating1: false,
            }, startConfig);
            const body = {
                'Ims': 0,
                'airCtrl': +mergedConfig.airCtrl,
                'airTemp': {
                    'unit': 1,
                    'value': `${mergedConfig.airTempvalue}`,
                },
                'defrost': mergedConfig.defrost,
                'heating1': +mergedConfig.heating1,
                'igniOnDuration': mergedConfig.igniOnDuration,
                'seatHeaterVentInfo': null,
                'username': this.userConfig.username,
                'vin': this.vehicleConfig.vin,
            };
            const response = yield this._request('/ac/v2/rcs/rsc/start', {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this.getDefaultHeaders()), { 'offset': '-4' }),
                body: body,
                json: true,
            });
            if (response.statusCode === 200) {
                return 'Vehicle started!';
            }
            return 'Failed to start vehicle';
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request('/ac/v2/rcs/rsc/stop', {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this.getDefaultHeaders()), { 'offset': '-4' }),
            });
            if (response.statusCode === 200) {
                return 'Vehicle stopped';
            }
            throw 'Failed to stop vehicle!';
        });
    }
    status(input) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        return __awaiter(this, void 0, void 0, function* () {
            const statusConfig = Object.assign(Object.assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
            const response = yield this._request('/ac/v2/rcs/rvs/vehicleStatus', {
                method: 'GET',
                headers: Object.assign({ 'REFRESH': statusConfig.refresh.toString() }, this.getDefaultHeaders()),
            });
            const { vehicleStatus } = JSON.parse(response.body);
            const parsedStatus = {
                chassis: {
                    hoodOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.hoodOpen,
                    trunkOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.trunkOpen,
                    locked: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorLock,
                    openDoors: {
                        frontRight: !!((_a = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _a === void 0 ? void 0 : _a.frontRight),
                        frontLeft: !!((_b = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _b === void 0 ? void 0 : _b.frontLeft),
                        backLeft: !!((_c = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _c === void 0 ? void 0 : _c.backLeft),
                        backRight: !!((_d = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _d === void 0 ? void 0 : _d.backRight),
                    },
                    tirePressureWarningLamp: {
                        rearLeft: !!((_e = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _e === void 0 ? void 0 : _e.tirePressureWarningLampRearLeft),
                        frontLeft: !!((_f = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _f === void 0 ? void 0 : _f.tirePressureWarningLampFrontLeft),
                        frontRight: !!((_g = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _g === void 0 ? void 0 : _g.tirePressureWarningLampFrontRight),
                        rearRight: !!((_h = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _h === void 0 ? void 0 : _h.tirePressureWarningLampRearRight),
                        all: !!((_j = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _j === void 0 ? void 0 : _j.tirePressureWarningLampAll),
                    },
                },
                climate: {
                    active: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airCtrlOn,
                    steeringwheelHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.steerWheelHeat),
                    sideMirrorHeat: false,
                    rearWindowHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.sideBackWindowHeat),
                    defrost: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.defrost,
                    temperatureSetpoint: (_k = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _k === void 0 ? void 0 : _k.value,
                    temperatureUnit: (_l = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _l === void 0 ? void 0 : _l.unit,
                },
                engine: {
                    ignition: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.engine,
                    adaptiveCruiseControl: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.acc,
                    range: (_m = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.dte) === null || _m === void 0 ? void 0 : _m.value,
                    charging: (_o = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _o === void 0 ? void 0 : _o.batteryCharge,
                    batteryCharge12v: (_p = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.battery) === null || _p === void 0 ? void 0 : _p.batSoc,
                    batteryChargeHV: (_q = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _q === void 0 ? void 0 : _q.batteryStatus,
                },
            };
            this._status = statusConfig.parsed ? parsedStatus : vehicleStatus;
            return this._status;
        });
    }
    unlock() {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = new URLSearchParams();
            formData.append('userName', this.userConfig.username || '');
            formData.append('vin', this.vehicleConfig.vin);
            const response = yield this._request('/ac/v2/rcs/rdo/on', {
                method: 'POST',
                headers: Object.assign({}, this.getDefaultHeaders()),
                body: formData.toString(),
            });
            if (response.statusCode === 200) {
                return 'Unlock successful';
            }
            return 'Something went wrong!';
        });
    }
    lock() {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = new URLSearchParams();
            formData.append('userName', this.userConfig.username || '');
            formData.append('vin', this.vehicleConfig.vin);
            const response = yield this._request('/ac/v2/rcs/rdo/off', {
                method: 'POST',
                headers: Object.assign({}, this.getDefaultHeaders()),
                body: formData.toString(),
            });
            if (response.statusCode === 200) {
                return 'Lock successful';
            }
            return 'Something went wrong!';
        });
    }
    startCharge() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request(`/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/charge`, {
                method: 'POST',
            });
            if (response.statusCode === 200) {
                logger.debug(`Send start charge command to Vehicle ${this.vehicleConfig.id}`);
                return 'Start charge successful';
            }
            throw 'Something went wrong!';
        });
    }
    stopCharge() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield got(`/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/charge`, {
                method: 'POST',
            });
            if (response.statusCode === 200) {
                logger.debug(`Send stop charge command to vehicle ${this.vehicleConfig.id}`);
                return 'Stop charge successful';
            }
            throw 'Something went wrong!';
        });
    }
    // TODO: not sure how to type a dynamic response
    /* eslint-disable @typescript-eslint/no-explicit-any */
    _request(service, options) {
        return __awaiter(this, void 0, void 0, function* () {
            // add logic for token refresh if to ensure we don't use a stale token
            yield this.controller.refreshAccessToken();
            // if we refreshed token make sure to apply it to the request
            options.headers.access_token = this.controller.session.accessToken;
            const response = yield got(`${BASE_URL}/${service}`, Object.assign({ throwHttpErrors: false }, options));
            if (response === null || response === void 0 ? void 0 : response.body) {
                logger.debug(response.body);
            }
            return response;
        });
    }
}
//# sourceMappingURL=american.vehicle.js.map