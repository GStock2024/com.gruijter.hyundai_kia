var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import got from 'got';
import logger from '../logger';
import { REGIONS, DEFAULT_VEHICLE_STATUS_OPTIONS } from '../constants';
import { BASE_URL, CLIENT_ID, API_HOST } from '../constants/america';
import { Vehicle } from './vehicle';
import { URLSearchParams } from 'url';
var AmericanVehicle = /** @class */ (function (_super) {
    __extends(AmericanVehicle, _super);
    function AmericanVehicle(vehicleConfig, controller) {
        var _this = _super.call(this, vehicleConfig, controller) || this;
        _this.vehicleConfig = vehicleConfig;
        _this.controller = controller;
        _this.region = REGIONS.US;
        logger.debug("US Vehicle " + _this.vehicleConfig.id + " created");
        return _this;
    }
    AmericanVehicle.prototype.getDefaultHeaders = function () {
        return {
            'access_token': this.controller.session.accessToken,
            'client_id': CLIENT_ID,
            'Host': API_HOST,
            'User-Agent': 'okhttp/3.12.0',
            'registrationId': this.vehicleConfig.regId,
            'gen': this.vehicleConfig.generation,
            'username': this.userConfig.username,
            'vin': this.vehicleConfig.vin,
            'APPCLOUD-VIN': this.vehicleConfig.vin,
            'Language': '0',
            'to': 'ISS',
            'encryptFlag': 'false',
            'from': 'SPA',
            'brandIndicator': this.vehicleConfig.brandIndicator,
            'bluelinkservicepin': this.userConfig.pin,
            'offset': '-5',
        };
    };
    AmericanVehicle.prototype.odometer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, foundVehicle;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request("/ac/v2/enrollment/details/" + this.userConfig.username, {
                            method: 'GET',
                            headers: __assign({}, this.getDefaultHeaders()),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode !== 200) {
                            return [2 /*return*/, Promise.reject('Failed to get odometer reading!')];
                        }
                        data = JSON.parse(response.body);
                        foundVehicle = data.enrolledVehicleDetails.find(function (item) {
                            return item.vehicleDetails.vin === _this.vin();
                        });
                        this._odometer = {
                            value: foundVehicle.vehicleDetails.odometer,
                            unit: 0,
                        };
                        return [2 /*return*/, Promise.resolve(this._odometer)];
                }
            });
        });
    };
    /**
     * This is seems to always poll the modem directly, no caching
     */
    AmericanVehicle.prototype.location = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request('/ac/v2/rcs/rfc/findMyCar', {
                            method: 'GET',
                            headers: __assign({}, this.getDefaultHeaders()),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode !== 200) {
                            return [2 /*return*/, Promise.reject('Failed to get location!')];
                        }
                        data = JSON.parse(response.body);
                        return [2 /*return*/, Promise.resolve({
                                latitude: data.coord.lat,
                                longitude: data.coord.lon,
                                altitude: data.coord.alt,
                                speed: {
                                    unit: data.speed.unit,
                                    value: data.speed.value,
                                },
                                heading: data.head,
                            })];
                }
            });
        });
    };
    AmericanVehicle.prototype.start = function (startConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var mergedConfig, body, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mergedConfig = __assign({
                            airCtrl: false,
                            igniOnDuration: 10,
                            airTempvalue: 70,
                            defrost: false,
                            heating1: false,
                        }, startConfig);
                        body = {
                            'Ims': 0,
                            'airCtrl': +mergedConfig.airCtrl,
                            'airTemp': {
                                'unit': 1,
                                'value': "" + mergedConfig.airTempvalue,
                            },
                            'defrost': mergedConfig.defrost,
                            'heating1': +mergedConfig.heating1,
                            'igniOnDuration': mergedConfig.igniOnDuration,
                            'seatHeaterVentInfo': null,
                            'username': this.userConfig.username,
                            'vin': this.vehicleConfig.vin,
                        };
                        return [4 /*yield*/, this._request('/ac/v2/rcs/rsc/start', {
                                method: 'POST',
                                headers: __assign(__assign({}, this.getDefaultHeaders()), { 'offset': '-4' }),
                                body: body,
                                json: true,
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            return [2 /*return*/, Promise.resolve('Vehicle started!')];
                        }
                        return [2 /*return*/, Promise.reject('Failed to start vehicle')];
                }
            });
        });
    };
    AmericanVehicle.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request(BASE_URL + "/ac/v2/rcs/rsc/stop", {
                            method: 'POST',
                            headers: __assign(__assign({}, this.getDefaultHeaders()), { 'offset': '-4' }),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            return [2 /*return*/, Promise.resolve('Vehicle stopped')];
                        }
                        return [2 /*return*/, Promise.reject('Failed to stop vehicle!')];
                }
            });
        });
    };
    AmericanVehicle.prototype.status = function (input) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var statusConfig, response, vehicleStatus, parsedStatus;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        statusConfig = __assign(__assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
                        return [4 /*yield*/, this._request('/ac/v2/rcs/rvs/vehicleStatus', {
                                method: 'GET',
                                headers: __assign({ 'REFRESH': statusConfig.refresh.toString() }, this.getDefaultHeaders()),
                            })];
                    case 1:
                        response = _c.sent();
                        vehicleStatus = JSON.parse(response.body).vehicleStatus;
                        parsedStatus = {
                            chassis: {
                                hoodOpen: vehicleStatus.hoodOpen,
                                trunkOpen: vehicleStatus.trunkOpen,
                                locked: vehicleStatus.doorLock,
                                openDoors: {
                                    frontRight: !!vehicleStatus.doorOpen.frontRight,
                                    frontLeft: !!vehicleStatus.doorOpen.frontLeft,
                                    backLeft: !!vehicleStatus.doorOpen.backLeft,
                                    backRight: !!vehicleStatus.doorOpen.backRight,
                                },
                                tirePressureWarningLamp: {
                                    rearLeft: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampRearLeft,
                                    frontLeft: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampFrontLeft,
                                    frontRight: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampFrontRight,
                                    rearRight: !!vehicleStatus.tirePressureLamp.tirePressureWarningLampRearRight,
                                    all: !!vehicleStatus.tirePressureLamp.trunkOpenStatus,
                                },
                            },
                            climate: {
                                active: vehicleStatus.airCtrlOn,
                                steeringwheelHeat: !!vehicleStatus.steerWheelHeat,
                                sideMirrorHeat: false,
                                rearWindowHeat: !!vehicleStatus.sideBackWindowHeat,
                                defrost: vehicleStatus.defrost,
                                temperatureSetpoint: vehicleStatus.airTemp.value,
                                temperatureUnit: vehicleStatus.airTemp.unit,
                            },
                            engine: {
                                ignition: vehicleStatus.engine,
                                adaptiveCruiseControl: vehicleStatus.acc,
                                range: vehicleStatus.dte.value,
                                charging: (_a = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _a === void 0 ? void 0 : _a.batteryCharge,
                                batteryCharge: (_b = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.battery) === null || _b === void 0 ? void 0 : _b.batSoc,
                            },
                        };
                        this._status = input.parsed ? parsedStatus : vehicleStatus;
                        return [2 /*return*/, Promise.resolve(this._status)];
                }
            });
        });
    };
    AmericanVehicle.prototype.unlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var formData, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        formData = new URLSearchParams();
                        formData.append('userName', this.userConfig.username || '');
                        formData.append('vin', this.vehicleConfig.vin);
                        return [4 /*yield*/, this._request('/ac/v2/rcs/rdo/on', {
                                method: 'POST',
                                headers: __assign({}, this.getDefaultHeaders()),
                                body: formData.toString(),
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            return [2 /*return*/, Promise.resolve('Unlock successful')];
                        }
                        return [2 /*return*/, Promise.reject('Something went wrong!')];
                }
            });
        });
    };
    AmericanVehicle.prototype.lock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var formData, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        formData = new URLSearchParams();
                        formData.append('userName', this.userConfig.username || '');
                        formData.append('vin', this.vehicleConfig.vin);
                        return [4 /*yield*/, this._request('/ac/v2/rcs/rdo/off', {
                                method: 'POST',
                                headers: __assign({}, this.getDefaultHeaders()),
                                body: formData.toString(),
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            return [2 /*return*/, Promise.resolve('Lock successful')];
                        }
                        return [2 /*return*/, Promise.reject('Something went wrong!')];
                }
            });
        });
    };
    // TODO: not sure how to type a dynamic response
    /* eslint-disable @typescript-eslint/no-explicit-any */
    AmericanVehicle.prototype._request = function (service, options) {
        return __awaiter(this, void 0, void 0, function () {
            var currentTime, tokenDelta, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentTime = Math.floor(+new Date() / 1000);
                        tokenDelta = -(currentTime - this.controller.session.tokenExpiresAt);
                        if (!(tokenDelta <= 60)) return [3 /*break*/, 2];
                        logger.debug("Token is expiring soon, let's get a new one");
                        return [4 /*yield*/, this.controller.refreshAccessToken()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        logger.debug('Token is all good, moving on!');
                        _a.label = 3;
                    case 3: return [4 /*yield*/, got(BASE_URL + "/" + service, options)];
                    case 4:
                        response = _a.sent();
                        logger.debug(response.body);
                        return [2 /*return*/, Promise.resolve(response)];
                }
            });
        });
    };
    return AmericanVehicle;
}(Vehicle));
export default AmericanVehicle;
//# sourceMappingURL=american.vehicle.js.map