var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { REGIONS, DEFAULT_VEHICLE_STATUS_OPTIONS } from '../constants';
import got from 'got';
import logger from '../logger';
import { Vehicle } from './vehicle';
import { getTempCode, getTempFromCode } from '../util';
import { EU_BASE_URL } from '../constants/europe';
var EuropeanVehicle = /** @class */ (function (_super) {
    __extends(EuropeanVehicle, _super);
    function EuropeanVehicle(vehicleConfig, controller) {
        var _this = _super.call(this, vehicleConfig, controller) || this;
        _this.vehicleConfig = vehicleConfig;
        _this.controller = controller;
        _this.region = REGIONS.EU;
        logger.debug("EU Vehicle " + _this.vehicleConfig.id + " created");
        return _this;
    }
    EuropeanVehicle.prototype.checkControlToken = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.controller.refreshAccessToken()];
                    case 1:
                        _b.sent();
                        if (!(((_a = this.controller.session) === null || _a === void 0 ? void 0 : _a.controlTokenExpiresAt) !== undefined)) return [3 /*break*/, 3];
                        if (!(!this.controller.session.controlToken ||
                            Date.now() / 1000 > this.controller.session.controlTokenExpiresAt)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.controller.enterPin()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    EuropeanVehicle.prototype.start = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/control/temperature", {
                                method: 'POST',
                                body: {
                                    action: 'start',
                                    hvacType: 0,
                                    options: {
                                        defrost: config.defrost,
                                        heating1: config.windscreenHeating ? 1 : 0,
                                    },
                                    tempCode: getTempCode(config.temperature),
                                    unit: config.unit,
                                },
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        logger.info("Climate started for vehicle " + this.vehicleConfig.id);
                        return [2 /*return*/, response.body];
                }
            });
        });
    };
    EuropeanVehicle.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/control/temperature", {
                                method: 'POST',
                                body: {
                                    action: 'stop',
                                    hvacType: 0,
                                    options: {
                                        defrost: true,
                                        heating1: 1,
                                    },
                                    tempCode: '10H',
                                    unit: 'C',
                                },
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        logger.info("Climate stopped for vehicle " + this.vehicleConfig.id);
                        return [2 /*return*/, response.body];
                }
            });
        });
    };
    EuropeanVehicle.prototype.lock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/control/door", {
                                method: 'POST',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                body: {
                                    action: 'close',
                                    deviceId: this.controller.session.deviceId,
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            logger.debug("Vehicle " + this.vehicleConfig.id + " locked");
                            return [2 /*return*/, 'Lock successful'];
                        }
                        return [2 /*return*/, 'Something went wrong!'];
                }
            });
        });
    };
    EuropeanVehicle.prototype.unlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/control/door", {
                                method: 'POST',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                body: {
                                    action: 'open',
                                    deviceId: this.controller.session.deviceId,
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            logger.debug("Vehicle " + this.vehicleConfig.id + " unlocked");
                            return [2 /*return*/, 'Unlock successful'];
                        }
                        return [2 /*return*/, 'Something went wrong!'];
                }
            });
        });
    };
    EuropeanVehicle.prototype.fullStatus = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var statusConfig, cachedResponse, fullStatus, statusResponse, locationResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        statusConfig = __assign(__assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
                        return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/status/latest", {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 2:
                        cachedResponse = _a.sent();
                        fullStatus = cachedResponse.body.resMsg.vehicleStatusInfo;
                        if (!statusConfig.refresh) return [3 /*break*/, 5];
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/status", {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 3:
                        statusResponse = _a.sent();
                        fullStatus.vehicleStatus = statusResponse.body.resMsg;
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/location", {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 4:
                        locationResponse = _a.sent();
                        fullStatus.vehicleLocation = locationResponse.body.resMsg.gpsDetail;
                        _a.label = 5;
                    case 5:
                        this._fullStatus = fullStatus;
                        return [2 /*return*/, Promise.resolve(this._fullStatus)];
                }
            });
        });
    };
    EuropeanVehicle.prototype.status = function (input) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        return __awaiter(this, void 0, void 0, function () {
            var statusConfig, cacheString, response, vehicleStatus, parsedStatus;
            return __generator(this, function (_t) {
                switch (_t.label) {
                    case 0:
                        statusConfig = __assign(__assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
                        return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _t.sent();
                        cacheString = statusConfig.refresh ? '' : '/latest';
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/status" + cacheString, {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 2:
                        response = _t.sent();
                        vehicleStatus = statusConfig.refresh
                            ? response.body.resMsg
                            : response.body.resMsg.vehicleStatusInfo.vehicleStatus;
                        parsedStatus = {
                            chassis: {
                                hoodOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.hoodOpen,
                                trunkOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.trunkOpen,
                                locked: vehicleStatus.doorLock,
                                openDoors: {
                                    frontRight: !!((_a = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _a === void 0 ? void 0 : _a.frontRight),
                                    frontLeft: !!((_b = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _b === void 0 ? void 0 : _b.frontLeft),
                                    backLeft: !!((_c = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _c === void 0 ? void 0 : _c.backLeft),
                                    backRight: !!((_d = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _d === void 0 ? void 0 : _d.backRight),
                                },
                                tirePressureWarningLamp: {
                                    rearLeft: !!((_e = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _e === void 0 ? void 0 : _e.tirePressureLampRL),
                                    frontLeft: !!((_f = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _f === void 0 ? void 0 : _f.tirePressureLampFL),
                                    frontRight: !!((_g = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _g === void 0 ? void 0 : _g.tirePressureLampFR),
                                    rearRight: !!((_h = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _h === void 0 ? void 0 : _h.tirePressureLampRR),
                                    all: !!((_j = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _j === void 0 ? void 0 : _j.tirePressureWarningLampAll),
                                },
                            },
                            climate: {
                                active: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airCtrlOn,
                                steeringwheelHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.steerWheelHeat),
                                sideMirrorHeat: false,
                                rearWindowHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.sideBackWindowHeat),
                                defrost: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.defrost,
                                temperatureSetpoint: getTempFromCode((_k = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _k === void 0 ? void 0 : _k.value),
                                temperatureUnit: (_l = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _l === void 0 ? void 0 : _l.unit,
                            },
                            engine: {
                                ignition: vehicleStatus.engine,
                                adaptiveCruiseControl: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.acc,
                                range: (_p = (_o = (_m = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _m === void 0 ? void 0 : _m.drvDistance[0].rangeByFuel) === null || _o === void 0 ? void 0 : _o.totalAvailableRange) === null || _p === void 0 ? void 0 : _p.value,
                                charging: (_q = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _q === void 0 ? void 0 : _q.batteryCharge,
                                batteryCharge12v: (_r = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.battery) === null || _r === void 0 ? void 0 : _r.batSoc,
                                batteryChargeHV: (_s = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _s === void 0 ? void 0 : _s.batteryStatus,
                            },
                        };
                        this._status = statusConfig.parsed ? parsedStatus : vehicleStatus;
                        return [2 /*return*/, this._status];
                }
            });
        });
    };
    EuropeanVehicle.prototype.odometer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/status/latest", {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        this._odometer = response.body.resMsg.vehicleStatusInfo.odometer;
                        return [2 /*return*/, this._odometer];
                }
            });
        });
    };
    EuropeanVehicle.prototype.location = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/location", {
                                method: 'GET',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        data = response.body.resMsg.gpsDetail;
                        this._location = {
                            latitude: data.coord.lat,
                            longitude: data.coord.lon,
                            altitude: data.coord.alt,
                            speed: {
                                unit: data.speed.unit,
                                value: data.speed.value,
                            },
                            heading: data.head,
                        };
                        return [2 /*return*/, this._location];
                }
            });
        });
    };
    EuropeanVehicle.prototype.startCharge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/control/charge", {
                                method: 'POST',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                body: {
                                    action: 'start',
                                    deviceId: this.controller.session.deviceId,
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            logger.debug("Send start charge command to Vehicle " + this.vehicleConfig.id);
                            return [2 /*return*/, 'Start charge successful'];
                        }
                        throw 'Something went wrong!';
                }
            });
        });
    };
    EuropeanVehicle.prototype.stopCharge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkControlToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, got(EU_BASE_URL + "/api/v2/spa/vehicles/" + this.vehicleConfig.id + "/control/charge", {
                                method: 'POST',
                                headers: {
                                    'Authorization': this.controller.session.controlToken,
                                    'ccsp-device-id': this.controller.session.deviceId,
                                    'Content-Type': 'application/json',
                                },
                                body: {
                                    action: 'stop',
                                    deviceId: this.controller.session.deviceId,
                                },
                                json: true,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.statusCode === 200) {
                            logger.debug("Send stop charge command to Vehicle " + this.vehicleConfig.id);
                            return [2 /*return*/, 'Stop charge successful'];
                        }
                        throw 'Something went wrong!';
                }
            });
        });
    };
    return EuropeanVehicle;
}(Vehicle));
export default EuropeanVehicle;
//# sourceMappingURL=european.vehicle.js.map