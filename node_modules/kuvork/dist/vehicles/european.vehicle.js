var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { REGIONS, DEFAULT_VEHICLE_STATUS_OPTIONS } from '../constants';
import got from 'got';
import logger from '../logger';
import { Vehicle } from './vehicle';
import { celciusToTempCode, tempCodeToCelsius } from '../util';
import { EU_BASE_URL } from '../constants/europe';
export default class EuropeanVehicle extends Vehicle {
    constructor(vehicleConfig, controller) {
        super(vehicleConfig, controller);
        this.vehicleConfig = vehicleConfig;
        this.controller = controller;
        this.region = REGIONS.EU;
        logger.debug(`EU Vehicle ${this.vehicleConfig.id} created`);
    }
    checkControlToken() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.controller.refreshAccessToken();
            if (((_a = this.controller.session) === null || _a === void 0 ? void 0 : _a.controlTokenExpiresAt) !== undefined) {
                if (!this.controller.session.controlToken ||
                    Date.now() / 1000 > this.controller.session.controlTokenExpiresAt) {
                    yield this.controller.enterPin();
                }
            }
        });
    }
    start(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/temperature`, {
                method: 'POST',
                body: {
                    action: 'start',
                    hvacType: 0,
                    options: {
                        defrost: config.defrost,
                        heating1: config.windscreenHeating ? 1 : 0,
                    },
                    tempCode: celciusToTempCode(config.temperature),
                    unit: config.unit,
                },
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                json: true,
            });
            logger.info(`Climate started for vehicle ${this.vehicleConfig.id}`);
            return response.body;
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/temperature`, {
                method: 'POST',
                body: {
                    action: 'stop',
                    hvacType: 0,
                    options: {
                        defrost: true,
                        heating1: 1,
                    },
                    tempCode: '10H',
                    unit: 'C',
                },
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                json: true,
            });
            logger.info(`Climate stopped for vehicle ${this.vehicleConfig.id}`);
            return response.body;
        });
    }
    lock() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/door`, {
                method: 'POST',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                body: {
                    action: 'close',
                    deviceId: this.controller.session.deviceId,
                },
                json: true,
            });
            if (response.statusCode === 200) {
                logger.debug(`Vehicle ${this.vehicleConfig.id} locked`);
                return 'Lock successful';
            }
            return 'Something went wrong!';
        });
    }
    unlock() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/door`, {
                method: 'POST',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                body: {
                    action: 'open',
                    deviceId: this.controller.session.deviceId,
                },
                json: true,
            });
            if (response.statusCode === 200) {
                logger.debug(`Vehicle ${this.vehicleConfig.id} unlocked`);
                return 'Unlock successful';
            }
            return 'Something went wrong!';
        });
    }
    fullStatus(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const statusConfig = Object.assign(Object.assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
            yield this.checkControlToken();
            const cachedResponse = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status/latest`, {
                method: 'GET',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                json: true,
            });
            const fullStatus = cachedResponse.body.resMsg.vehicleStatusInfo;
            if (statusConfig.refresh) {
                const statusResponse = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                    },
                    json: true,
                });
                fullStatus.vehicleStatus = statusResponse.body.resMsg;
                const locationResponse = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/location`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                    },
                    json: true,
                });
                fullStatus.vehicleLocation = locationResponse.body.resMsg.gpsDetail;
            }
            this._fullStatus = fullStatus;
            return Promise.resolve(this._fullStatus);
        });
    }
    status(input) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        return __awaiter(this, void 0, void 0, function* () {
            const statusConfig = Object.assign(Object.assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
            yield this.checkControlToken();
            const cacheString = statusConfig.refresh ? '' : '/latest';
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status${cacheString}`, {
                method: 'GET',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                json: true,
            });
            // handles refreshing data
            const vehicleStatus = statusConfig.refresh
                ? response.body.resMsg
                : response.body.resMsg.vehicleStatusInfo.vehicleStatus;
            const parsedStatus = {
                chassis: {
                    hoodOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.hoodOpen,
                    trunkOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.trunkOpen,
                    locked: vehicleStatus.doorLock,
                    openDoors: {
                        frontRight: !!((_a = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _a === void 0 ? void 0 : _a.frontRight),
                        frontLeft: !!((_b = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _b === void 0 ? void 0 : _b.frontLeft),
                        backLeft: !!((_c = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _c === void 0 ? void 0 : _c.backLeft),
                        backRight: !!((_d = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _d === void 0 ? void 0 : _d.backRight),
                    },
                    tirePressureWarningLamp: {
                        rearLeft: !!((_e = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _e === void 0 ? void 0 : _e.tirePressureLampRL),
                        frontLeft: !!((_f = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _f === void 0 ? void 0 : _f.tirePressureLampFL),
                        frontRight: !!((_g = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _g === void 0 ? void 0 : _g.tirePressureLampFR),
                        rearRight: !!((_h = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _h === void 0 ? void 0 : _h.tirePressureLampRR),
                        all: !!((_j = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _j === void 0 ? void 0 : _j.tirePressureWarningLampAll),
                    },
                },
                climate: {
                    active: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airCtrlOn,
                    steeringwheelHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.steerWheelHeat),
                    sideMirrorHeat: false,
                    rearWindowHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.sideBackWindowHeat),
                    defrost: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.defrost,
                    temperatureSetpoint: tempCodeToCelsius((_k = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _k === void 0 ? void 0 : _k.value),
                    temperatureUnit: (_l = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _l === void 0 ? void 0 : _l.unit,
                },
                engine: {
                    ignition: vehicleStatus.engine,
                    adaptiveCruiseControl: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.acc,
                    range: (_p = (_o = (_m = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _m === void 0 ? void 0 : _m.drvDistance[0].rangeByFuel) === null || _o === void 0 ? void 0 : _o.totalAvailableRange) === null || _p === void 0 ? void 0 : _p.value,
                    charging: (_q = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _q === void 0 ? void 0 : _q.batteryCharge,
                    batteryCharge12v: (_r = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.battery) === null || _r === void 0 ? void 0 : _r.batSoc,
                    batteryChargeHV: (_s = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _s === void 0 ? void 0 : _s.batteryStatus,
                },
            };
            this._status = statusConfig.parsed ? parsedStatus : vehicleStatus;
            return this._status;
        });
    }
    odometer() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status/latest`, {
                method: 'GET',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                json: true,
            });
            this._odometer = response.body.resMsg.vehicleStatusInfo.odometer;
            return this._odometer;
        });
    }
    location() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/location`, {
                method: 'GET',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                json: true,
            });
            const data = response.body.resMsg.gpsDetail;
            this._location = {
                latitude: data.coord.lat,
                longitude: data.coord.lon,
                altitude: data.coord.alt,
                speed: {
                    unit: data.speed.unit,
                    value: data.speed.value,
                },
                heading: data.head,
            };
            return this._location;
        });
    }
    startCharge() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/charge`, {
                method: 'POST',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                body: {
                    action: 'start',
                    deviceId: this.controller.session.deviceId,
                },
                json: true,
            });
            if (response.statusCode === 200) {
                logger.debug(`Send start charge command to Vehicle ${this.vehicleConfig.id}`);
                return 'Start charge successful';
            }
            throw 'Something went wrong!';
        });
    }
    stopCharge() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            const response = yield got(`${EU_BASE_URL}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/charge`, {
                method: 'POST',
                headers: {
                    'Authorization': this.controller.session.controlToken,
                    'ccsp-device-id': this.controller.session.deviceId,
                    'Content-Type': 'application/json',
                },
                body: {
                    action: 'stop',
                    deviceId: this.controller.session.deviceId,
                },
                json: true,
            });
            if (response.statusCode === 200) {
                logger.debug(`Send stop charge command to Vehicle ${this.vehicleConfig.id}`);
                return 'Stop charge successful';
            }
            throw 'Something went wrong!';
        });
    }
}
//# sourceMappingURL=european.vehicle.js.map